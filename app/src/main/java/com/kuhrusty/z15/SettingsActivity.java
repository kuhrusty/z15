package com.kuhrusty.z15;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.CheckBoxPreference;
import android.preference.ListPreference;
import android.preference.Preference;
import android.preference.PreferenceActivity;
import android.preference.PreferenceFragment;
import android.preference.PreferenceManager;
import android.preference.SwitchPreference;
import android.support.v4.app.NavUtils;
import android.support.v7.app.ActionBar;
import android.view.MenuItem;

/**
 * A {@link PreferenceActivity} that presents a set of application settings. On
 * handset devices, settings are presented as a single list. On tablets,
 * settings are split by category, with category headers shown to the left of
 * the list of settings.
 * <p>
 * See <a href="http://developer.android.com/design/patterns/settings.html">
 * Android Design: Settings</a> for design guidelines and the <a
 * href="http://developer.android.com/guide/topics/ui/settings.html">Settings
 * API Guide</a> for more information on developing a Settings UI.
 */
public class SettingsActivity extends AppCompatPreferenceActivity {
    /**
     * The pref_show_timer key from preferences.xml.
     */
    public static final String PREF_SHOW_TIMER = "pref_show_timer";
    /**
     * The pref_show_growl_timer key from preferences.xml.
     */
    public static final String PREF_SHOW_GROWL_TIMER = "pref_show_growl_timer";
    /**
     * The pref_show_ks_scenarios key from preferences.xml.
     */
    public static final String PREF_SHOW_KS_SCENARIOS = "pref_show_ks_scenarios";
    /**
     * The pref_show_ff_rew key from preferences.xml.
     */
    public static final String PREF_SHOW_FF_REW = "pref_show_ff_rew";

    /**
     * Generated by Android Studio.
     *
     * A preference value change listener that updates the preference's summary
     * to reflect its new value.
     */
    private static class OurPreferenceChangeListener implements Preference.OnPreferenceChangeListener {
        private Context context;
        public OurPreferenceChangeListener(Context context) {
            this.context = context;
        }

        @Override
        public boolean onPreferenceChange(Preference preference, Object value) {
            String stringValue = value.toString();

            if (preference instanceof ListPreference) {
                // For list preferences, look up the correct display value in
                // the preference's 'entries' list.
                ListPreference listPreference = (ListPreference) preference;
                int index = listPreference.findIndexOfValue(stringValue);

                // Set the summary to reflect the new value.
                preference.setSummary(
                        index >= 0
                                ? listPreference.getEntries()[index]
                                : null);

            } else if ((preference instanceof CheckBoxPreference) ||
                       (preference instanceof SwitchPreference)) {
                //  we don't need a summary
            } else {
                // For all other preferences, set the summary to the value's
                // simple string representation.
                preference.setSummary(stringValue);
            }
            return true;
        }
    };

    /**
     * Generated by Android Studio.
     *
     * Binds a preference's summary to its value. More specifically, when the
     * preference's value is changed, its summary (line of text below the
     * preference title) is updated to reflect the value. The summary is also
     * immediately updated upon calling this method. The exact display format is
     * dependent on the type of preference.
     */
    private static void bindPreferenceSummaryToValue(Preference.OnPreferenceChangeListener opcl,
                                                     Preference preference) {
        // Set the listener to watch for value changes.
        preference.setOnPreferenceChangeListener(opcl);

        // Trigger the listener immediately with the preference's
        // current value.
        manuallyTriggerPreferenceChange(opcl, preference);
    }

    private static void manuallyTriggerPreferenceChange(Preference.OnPreferenceChangeListener pcl,
                                                        Preference preference) {
        Object value = null;
        if ((preference instanceof CheckBoxPreference) ||
            (preference instanceof SwitchPreference)) {
            value = PreferenceManager
                    .getDefaultSharedPreferences(preference.getContext())
                    .getBoolean(preference.getKey(), false);
        } else {
            value = PreferenceManager
                    .getDefaultSharedPreferences(preference.getContext())
                    .getString(preference.getKey(), "");
        }
        pcl.onPreferenceChange(preference, value);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Display the fragment as the main content.
        getFragmentManager().beginTransaction()
                .replace(android.R.id.content, new Z15PreferenceFragment())
                .commit();
        setupActionBar();
    }

    /**
     * Generated by Android Studio.
     *
     * Set up the {@link android.app.ActionBar}, if the API is available.
     */
    private void setupActionBar() {
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            // Show the Up button in the action bar.
            actionBar.setDisplayHomeAsUpEnabled(true);
        }
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        int id = item.getItemId();
        if (id == android.R.id.home) {
            if (!super.onMenuItemSelected(featureId, item)) {
                NavUtils.navigateUpFromSameTask(this);
            }
            return true;
        }
        return super.onMenuItemSelected(featureId, item);
    }

    public static class Z15PreferenceFragment extends PreferenceFragment {
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            addPreferencesFromResource(R.xml.preferences);

            //  ARGHH--if the Android Design guidelines specify this, then why
            //  don't the Android libraries just $%#$@!! do this!?
            //  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
            //  // to their values. When their values change, their summaries are
            //  // updated to reflect the new value, per the Android Design
            //  // guidelines.
            SharedPreferences prefs = getPreferenceManager().getSharedPreferences();
            OurPreferenceChangeListener opcl = new OurPreferenceChangeListener(getActivity());
            for (String prefKey : prefs.getAll().keySet()) {
                Preference pref = findPreference(prefKey);
                if (pref != null) {
                    bindPreferenceSummaryToValue(opcl, pref);
                }
            }
        }
    }
}
